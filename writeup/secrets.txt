find . | grep yaml

Within the root directory I useed the find . | grep yaml to checked each yaml file to see if it had any sensitive values to be stored in the secret file.

Found three files that stored sensitive data which was, 

./db/k8s/db-deployment.yaml
./db/k8/db-deployment.yaml
./GiftcardSite/k8/django-deploy.yaml

It seemed that the sql root password was being exposed with the value, thisisattesting. and does not have a secret yaml file. So we need to create one. 

cp django-admin-pass-secret.yaml custom-secrets.yaml and edit the name and data key , but before that need to encrypt the data by using the follwing command and add it to the yaml file.

echo -n 'thisisatesting.' | base64

nano django-deploy.yaml.

I set up the secretkeyRef for the yaml file can communicate to the custom-secret.ymal when it deploy and store the key to the enviroment variable within the program. 

kubectl apply -f custom-secrets.yaml 
kubectl apply -f django-deploy.yaml

Applied the ymal to kubernetes 

Check the secret using the following, 
kubectl get secrets


kubcetl delete pods --all
delete the pods so it can communicate the update kubernetes.

kubectl get pods
kubectl get services

Check the second on the end of the column to see if the pods was redployed.


kubectl -exec -it <django deploy> sh went inside the file but realize it wasn't necessary but check if there was credentials that was being exposed and found out that the secretkey needed be pass and called by an enviroment variable.

I felt like it was not needed to create a ymal file for the secretkey , better to added the credentials store in the django-admin-pass-secret.yaml but first encrypted with the following commands and take the value in tha django-admin-pass-secret.yaml custom-secrets.yaml.

echo -n 'kmgysa#fz+9(z1*=c0ydrjizk*7sthm2ga1z4=^61$cxcq8b$l' | base64

nano ./GiftcardSite/k8/django-deploy.yaml 

created seprate name to call the key for isolation and to call the enviroment variable when the program is running. 

kubectl apply -f django-admin-pass-secret.yaml custom-secrets.yaml
kubectl apply -f django-deploy.yaml

kubcetl delete pods --all

Redeploying the pods and going inside the the container and test the enviroment variable. 

kubectl -exec -it <django deploy> sh 

echo $secretkey

Looks Good!

